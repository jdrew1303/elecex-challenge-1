# Improvements

Some are improvements that I can make to my submission and some are improvements to the test overall.

## testing
- [`supertest`](https://github.com/visionmedia/supertest) allows for mounting and testing of individual routes end to end. This would allow you to stub out the DB layer and hit validation and serialisation layers.
- Use `:memory:` database for sqlite. This will stop you overwriting the db in the file with migrations. This is helpful if you want to run tests in parallel and if you want to set up data on a per test basis.
- Use factories to generate test data (along with `faker.js`). This stops you having to create the test data by hand per test.
- The documentation mentions code coverage without tooling to handle calculation of the coverage. Some will also say that you should have 100% coverage but a lot of time there is a dimishing returns in it. I've added in `nyc`/`istanbul` for coverage (this doesnt include the e2e tests):
```bash
------------------------------|----------|----------|----------|----------|-------------------|
File                          |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
------------------------------|----------|----------|----------|----------|-------------------|
All files                     |     95.5 |    82.35 |    81.48 |    95.45 |                   |
 api/devices                  |    94.51 |      100 |    81.48 |    94.44 |                   |
  controller.js               |    93.75 |      100 |     87.5 |    93.33 |                31 |
  controller.spec.js          |    94.67 |      100 |    78.95 |    94.67 |      33,57,88,146 |
 api/sites                    |       92 |      100 |    71.43 |       92 |                   |
  controller.js               |    72.73 |      100 |       50 |    72.73 |           8,23,28 |
  controller.spec.js          |    97.44 |      100 |     87.5 |    97.44 |                37 |
 middlewares                  |      100 |    72.73 |    92.31 |      100 |                   |
  internalServerError.js      |      100 |    71.43 |      100 |      100 |                 8 |
  internalServerError.spec.js |      100 |      100 |      100 |      100 |                   |
  serialiseBoomErrors.js      |      100 |       75 |      100 |      100 |                 7 |
  serialiseBoomErrors.spec.js |      100 |      100 |    83.33 |      100 |                   |
------------------------------|----------|----------|----------|----------|-------------------|
```

## structure
- For a simple crud application it can be helpful to break the applciation down to take advantage of dependency injection. This will make testing and stubbing for development easier.
- More of the boilerplate should be moved into express middleware. (responding and setting of status codes)

## From a scope point of view
- The requirements are quite broad. It's hard to know if you've overengineered the answer or not. While the example is trivial and you could leave it in the `index.js`, you wouldn't do that in a production application. 

## Submitting open source repos instead of the demo project.
- It might be more representitive of a programmers work over time.
- If they have multiple exams/tests to take then each of those few hours can add up.

## Documentation
- A lot of the logic in here has no real meat on it. Its hard to write documentation without resorting to the sort of thing autogenerated by a Java IDE.